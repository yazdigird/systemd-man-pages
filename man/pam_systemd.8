'\" t
.TH "PAM_SYSTEMD" "8" "" "systemd 246" "pam_systemd"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pam_systemd \- Register user sessions in the systemd login manager
.SH "SYNOPSIS"
.PP
pam_systemd\&.so
.SH "DESCRIPTION"
.PP
\fBpam_systemd\fR
registers user sessions with the systemd login manager
\fBsystemd-logind.service\fR(8), and hence the systemd control group hierarchy\&.
.PP
The module also applies various resource management and runtime parameters to the new session, as configured in the
\m[blue]\fBJSON User Record\fR\m[]\&\s-2\u[1]\d\s+2
of the user, when one is defined\&.
.PP
On login, this module \(em in conjunction with
systemd\-logind\&.service
\(em ensures the following:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
If it does not exist yet, the user runtime directory
/run/user/$UID
is either created or mounted as new
"tmpfs"
file system with quota applied, and its ownership changed to the user that is logging in\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
The
\fI$XDG_SESSION_ID\fR
environment variable is initialized\&. If auditing is available and
\fBpam_loginuid\&.so\fR
was run before this module (which is highly recommended), the variable is initialized from the auditing session id (/proc/self/sessionid)\&. Otherwise, an independent session counter is used\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
A new systemd scope unit is created for the session\&. If this is the first concurrent session of the user, an implicit per\-user slice unit below
user\&.slice
is automatically created and the scope placed into it\&. An instance of the system service
user@\&.service, which runs the systemd user manager instance, is started\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
The
"$TZ",
"$EMAIL"
and
"$LANG"
environment variables are configured for the user, based on the respective data from the user\*(Aqs JSON record (if it is defined)\&. Moreover, any environment variables explicitly configured in the user record are imported, and the umask, nice level, and resource limits initialized\&.
.RE
.PP
On logout, this module ensures the following:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
If enabled in
\fBlogind.conf\fR(5)
(\fIKillUserProcesses=\fR), all processes of the session are terminated\&. If the last concurrent session of a user ends, the user\*(Aqs systemd instance will be terminated too, and so will the user\*(Aqs slice unit\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
If the last concurrent session of a user ends, the user runtime directory
/run/user/$UID
and all its contents are removed, too\&.
.RE
.PP
If the system was not booted up with systemd as init system, this module does nothing and immediately returns
\fBPAM_SUCCESS\fR\&.
.SH "OPTIONS"
.PP
The following options are understood:
.PP
\fIclass=\fR
.RS 4
Takes a string argument which sets the session class\&. The
\fIXDG_SESSION_CLASS\fR
environment variable (see below) takes precedence\&. One of
"user",
"greeter",
"lock\-screen"
or
"background"\&. See
\fBsd_session_get_class\fR(3)
for details about the session class\&.
.RE
.PP
\fItype=\fR
.RS 4
Takes a string argument which sets the session type\&. The
\fIXDG_SESSION_TYPE\fR
environment variable (see below) takes precedence\&. One of
"unspecified",
"tty",
"x11",
"wayland"
or
"mir"\&. See
\fBsd_session_get_type\fR(3)
for details about the session type\&.
.RE
.PP
\fIdesktop=\fR
.RS 4
Takes a single, short identifier string for the desktop environment\&. The
\fIXDG_SESSION_DESKTOP\fR
environment variable (see below) takes precedence\&. This may be used to indicate the session desktop used, where this applies and if this information is available\&. For example:
"GNOME", or
"KDE"\&. It is recommended to use the same identifiers and capitalization as for
\fI$XDG_CURRENT_DESKTOP\fR, as defined by the
\m[blue]\fBDesktop Entry Specification\fR\m[]\&\s-2\u[2]\d\s+2\&. (However, note that the option only takes a single item, and not a colon\-separated list like
\fI$XDG_CURRENT_DESKTOP\fR\&.) See
\fBsd_session_get_desktop\fR(3)
for further details\&.
.RE
.PP
\fIdebug\fR[=]
.RS 4
Takes an optional boolean argument\&. If yes or without the argument, the module will log debugging information as it operates\&.
.RE
.SH "MODULE TYPES PROVIDED"
.PP
Only
\fBsession\fR
is provided\&.
.SH "ENVIRONMENT"
.PP
The following environment variables are initialized by the module and available to the processes of the user\*(Aqs session:
.PP
\fI$XDG_SESSION_ID\fR
.RS 4
A short session identifier, suitable to be used in filenames\&. The string itself should be considered opaque, although often it is just the audit session ID as reported by
/proc/self/sessionid\&. Each ID will be assigned only once during machine uptime\&. It may hence be used to uniquely label files or other resources of this session\&. Combine this ID with the boot identifier, as returned by
\fBsd_id128_get_boot\fR(3), for a globally unique identifier\&.
.RE
.PP
\fI$XDG_RUNTIME_DIR\fR
.RS 4
Path to a user\-private user\-writable directory that is bound to the user login time on the machine\&. It is automatically created the first time a user logs in and removed on the user\*(Aqs final logout\&. If a user logs in twice at the same time, both sessions will see the same
\fI$XDG_RUNTIME_DIR\fR
and the same contents\&. If a user logs in once, then logs out again, and logs in again, the directory contents will have been lost in between, but applications should not rely on this behavior and must be able to deal with stale files\&. To store session\-private data in this directory, the user should include the value of
\fI$XDG_SESSION_ID\fR
in the filename\&. This directory shall be used for runtime file system objects such as
\fBAF_UNIX\fR
sockets, FIFOs, PID files and similar\&. It is guaranteed that this directory is local and offers the greatest possible file system feature set the operating system provides\&. For further details, see the
\m[blue]\fBXDG Base Directory Specification\fR\m[]\&\s-2\u[3]\d\s+2\&.
\fI$XDG_RUNTIME_DIR\fR
is not set if the current user is not the original user of the session\&.
.RE
.PP
\fI$TZ\fR, \fI$EMAIL\fR, \fI$LANG\fR
.RS 4
If a JSON user record is known for the user logging in these variables are initialized from the respective data in the record\&.
.RE
.PP
The following environment variables are read by the module and may be used by the PAM service to pass metadata to the module\&. If these variables are not set when the PAM module is invoked but can be determined otherwise they are set by the module, so that these variables are initialized for the session and applications if known at all\&.
.PP
\fI$XDG_SESSION_TYPE\fR
.RS 4
The session type\&. This may be used instead of
\fItype=\fR
on the module parameter line, and is usually preferred\&.
.RE
.PP
\fI$XDG_SESSION_CLASS\fR
.RS 4
The session class\&. This may be used instead of
\fIclass=\fR
on the module parameter line, and is usually preferred\&.
.RE
.PP
\fI$XDG_SESSION_DESKTOP\fR
.RS 4
The desktop identifier\&. This may be used instead of
\fIdesktop=\fR
on the module parameter line, and is usually preferred\&.
.RE
.PP
\fI$XDG_SEAT\fR
.RS 4
The seat name the session shall be registered for, if any\&.
.RE
.PP
\fI$XDG_VTNR\fR
.RS 4
The VT number the session shall be registered for, if any\&. (Only applies to seats with a VT available, such as
"seat0")
.RE
.PP
If not set,
\fBpam_systemd\fR
will initialize
\fI$XDG_SEAT\fR
and
\fI$XDG_VTNR\fR
based on the
\fI$DISPLAY\fR
variable (if the latter is set)\&.
.SH "SESSION LIMITS"
.PP
PAM modules earlier in the stack, that is those that come before
\fBpam_systemd\&.so\fR, can set session scope limits using the PAM context objects\&. The data for these objects is provided as NUL\-terminated C strings and maps directly to the respective unit resource control directives\&. Note that these limits apply to individual sessions of the user, they do not apply to all user processes as a combined whole\&. In particular, the per\-user
\fBuser@\&.service\fR
unit instance, which runs the
\fBsystemd \-\-user\fR
manager process and its children, and is tracked outside of any session, being shared by all the user\*(Aqs sessions, is not covered by these limits\&.
.PP
See
\fBsystemd.resource-control\fR(5)
for more information about the resources\&. Also, see
\fBpam_set_data\fR(3)
for additional information about how to set the context objects\&.
.PP
\fIsystemd\&.memory_max=\fR
.RS 4
Sets unit
\fIMemoryMax=\fR\&.
.RE
.PP
\fIsystemd\&.tasks_max=\fR
.RS 4
Sets unit
\fITasksMax=\fR\&.
.RE
.PP
\fIsystemd\&.cpu_weight=\fR
.RS 4
Sets unit
\fICPUWeight=\fR\&.
.RE
.PP
\fIsystemd\&.io_weight=\fR
.RS 4
Sets unit
\fIIOWeight=\fR\&.
.RE
.PP
\fIsystemd\&.runtime_max_sec=\fR
.RS 4
Sets unit
\fIRuntimeMaxSec=\fR\&.
.RE
.PP
Example data as can be provided from an another PAM module:
.sp
.if n \{\
.RS 4
.\}
.nf
pam_set_data(handle, "systemd\&.memory_max", (void *)"200M", cleanup);
pam_set_data(handle, "systemd\&.tasks_max",  (void *)"50",   cleanup);
pam_set_data(handle, "systemd\&.cpu_weight", (void *)"100",  cleanup);
pam_set_data(handle, "systemd\&.io_weight",  (void *)"340",  cleanup);
pam_set_data(handle, "systemd\&.runtime_max_sec", (void *)"3600", cleanup);
      
.fi
.if n \{\
.RE
.\}
.sp
.SH "EXAMPLE"
.PP
Here\*(Aqs an example PAM configuration fragment that allows users sessions to be managed by
systemd\-logind\&.service:
.sp
.if n \{\
.RS 4
.\}
.nf
#%PAM\-1\&.0
auth      sufficient pam_unix\&.so
\-auth     sufficient pam_systemd_home\&.so
auth      required   pam_deny\&.so

account   required   pam_nologin\&.so
\-account  sufficient pam_systemd_home\&.so
account   sufficient pam_unix\&.so
account   required   pam_permit\&.so

\-password sufficient pam_systemd_home\&.so
password  sufficient pam_unix\&.so sha512 shadow try_first_pass try_authtok
password  required   pam_deny\&.so

\-session  optional   pam_keyinit\&.so revoke
\-session  optional   pam_loginuid\&.so
\-session  optional   pam_systemd_home\&.so
\fB\-session  optional   pam_systemd\&.so\fR
session   required   pam_unix\&.so
.fi
.if n \{\
.RE
.\}
.SH "SEE ALSO"
.PP
\fBsystemd\fR(1),
\fBsystemd-logind.service\fR(8),
\fBlogind.conf\fR(5),
\fBloginctl\fR(1),
\fBpam_systemd_home\fR(8),
\fBpam.conf\fR(5),
\fBpam.d\fR(5),
\fBpam\fR(8),
\fBpam_loginuid\fR(8),
\fBsystemd.scope\fR(5),
\fBsystemd.slice\fR(5),
\fBsystemd.service\fR(5)
.SH "NOTES"
.IP " 1." 4
JSON User Record
.RS 4
\%https://systemd.io/USER_RECORD
.RE
.IP " 2." 4
Desktop Entry Specification
.RS 4
\%http://standards.freedesktop.org/desktop-entry-spec/latest/
.RE
.IP " 3." 4
XDG Base Directory Specification
.RS 4
\%http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
.RE
